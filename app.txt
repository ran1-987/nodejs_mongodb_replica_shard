const express = require('express');
const mongoose = require('mongoose');
const app = express();
const PORT = 4000;

// Middleware to parse JSON
app.use(express.json());



const uri = 'mongodb://localhost:28081,localhost:28082,localhost:28083/?replicaSet=shard_repl';


// Connect to MongoDB using Mongoose
mongoose.connect(uri)
  .then(() => console.log('Connected to MongoDB'))
  .catch(err => console.error('Failed to connect to MongoDB', err));

// Define a Mongoose schema for users
const userSchema = new mongoose.Schema({
  name: String,
  email: String,
  age: Number, // Example field: Add more fields as needed
});

// Create a Mongoose model
const User = mongoose.model('users', userSchema);

// POST - Create a new user
app.post('/user', async (req, res) => {
  const newUser = new User(req.body);
  try {
    const savedUser = await newUser.save();
    res.status(201).json({ message: 'User created successfully', user: savedUser });
  } catch (err) {
    res.status(500).json({ message: 'Error creating user', error: err.message });
  }
});

// GET - Retrieve a user by ID
app.get('/user/:id', async (req, res) => {
  try {
    const user = await User.findById(req.params.id);
    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }
    res.json(user);
  } catch (err) {
    res.status(500).json({ message: 'Error retrieving user', error: err.message });
  }
});

// PUT - Update a user's data
app.put('/user/:id', async (req, res) => {
  try {
    const updatedUser = await User.findByIdAndUpdate(req.params.id, req.body, { new: true, runValidators: true });
    if (!updatedUser) {
      return res.status(404).json({ message: 'User not found' });
    }
    res.json({ message: 'User updated successfully', user: updatedUser });
  } catch (err) {
    res.status(500).json({ message: 'Error updating user', error: err.message });
  }
});

// Start the server
app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});